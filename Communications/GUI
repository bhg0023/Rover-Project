import customtkinter as ctk
import cv2
import threading
import tkinter as tk
from PIL import Image, ImageTk
import pygame
import serial
from tkintermapview import TkinterMapView
import time
import math

# ========== CONFIG ==========
SERIAL_PORT = "COM3"   # âš¡ Change to match your system
BAUDRATE = 115200

# Serial init
ser = serial.Serial(SERIAL_PORT, BAUDRATE, timeout=1)

# Joystick init
pygame.init()
if pygame.joystick.get_count() > 0:
    joystick = pygame.joystick.Joystick(0)
    joystick.init()
else:
    joystick = None

# GUI setup
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

app = ctk.CTk()
app.title("Rover Base Station")
app.geometry("1600x900")

# ========= LEFT FRAME (Controls + Telemetry) =========
frame_left = ctk.CTkFrame(app, width=350, corner_radius=15)
frame_left.pack(side="left", fill="y", padx=10, pady=10)

label_title = ctk.CTkLabel(frame_left, text="ðŸŽ® Rover Controls", font=("Arial", 20, "bold"))
label_title.pack(pady=10)

telemetry_label = ctk.CTkLabel(frame_left, text="ðŸ“¡ Telemetry Dashboard", font=("Arial", 16, "bold"))
telemetry_label.pack(pady=10)

# ---- Speed Gauge (mph) ----
speed_canvas = tk.Canvas(frame_left, width=200, height=200, bg="black", highlightthickness=0)
speed_canvas.pack(pady=10)

# Gauge arc
speed_canvas.create_arc(20, 20, 180, 180, start=30, extent=120, style="arc", outline="white", width=3)

# Tick marks and labels
for i, mph in enumerate([0, 20, 40, 60]):
    angle = 30 + (mph / 60) * 120
    rad = math.radians(angle)
    x = 100 + 70 * math.cos(rad)
    y = 100 - 70 * math.sin(rad)
    speed_canvas.create_text(x, y, text=str(mph), fill="white", font=("Consolas", 10, "bold"))

# Speed text
speed_text = speed_canvas.create_text(100, 150, text="0 mph", fill="white", font=("Consolas", 14, "bold"))

# Needle line
speed_needle = speed_canvas.create_line(100, 100, 100, 40, fill="red", width=3)

def update_speed_gauge(speed_mph):
    speed_mph = max(0, min(60, speed_mph))  # clamp 0â€“60 mph
    angle = 30 + (speed_mph / 60) * 120    # map mph to gauge arc
    rad = math.radians(angle)
    x = 100 + 60 * math.cos(rad)
    y = 100 - 60 * math.sin(rad)
    speed_canvas.coords(speed_needle, 100, 100, x, y)
    speed_canvas.itemconfig(speed_text, text=f"{speed_mph:.0f} mph")

# ---- Battery Indicator ----
battery_canvas = tk.Canvas(frame_left, width=80, height=200, bg="black", highlightthickness=0)
battery_canvas.pack(pady=10)

# Outline
battery_canvas.create_rectangle(20, 20, 60, 180, outline="white", width=3)
battery_level = battery_canvas.create_rectangle(22, 178, 58, 178, fill="green", width=0)
battery_text = battery_canvas.create_text(40, 190, text="--%", fill="white", font=("Consolas", 12, "bold"))

def update_battery(level):
    level = max(0, min(100, level))  # clamp 0-100
    fill_height = int((level / 100) * 158)
    y1 = 178 - fill_height
    battery_canvas.coords(battery_level, 22, y1, 58, 178)

    # Color zones
    color = "green"
    if level < 50:
        color = "yellow"
    if level < 20:
        color = "red"
    battery_canvas.itemconfig(battery_level, fill=color)
    battery_canvas.itemconfig(battery_text, text=f"{level:.0f}%")

# GPS Label
gps_label = ctk.CTkLabel(frame_left, text="GPS: (--, --)", font=("Consolas", 14))
gps_label.pack(pady=15)

# ========= RIGHT FRAME (Video + Map) =========
frame_right = ctk.CTkFrame(app, corner_radius=15)
frame_right.pack(side="right", expand=True, fill="both", padx=10, pady=10)

video_label = ctk.CTkLabel(frame_right, text="ðŸŽ¥ Video Feed", font=("Arial", 20, "bold"))
video_label.pack(pady=10)

video_canvas = tk.Label(frame_right, bg="black")
video_canvas.pack(pady=5, expand=True, fill="both")

map_label = ctk.CTkLabel(frame_right, text="ðŸ—º Rover Map", font=("Arial", 20, "bold"))
map_label.pack(pady=10)

map_widget = TkinterMapView(frame_right, width=800, height=300, corner_radius=15)
map_widget.pack(pady=10, fill="x")

# Default position UNT Denton
map_widget.set_position(33.2140, -97.1331)
map_widget.set_zoom(15)
rover_marker = map_widget.set_marker(33.2140, -97.1331, text="Rover")

# ========= FUNCTIONS =========
def smooth_update(lat, lon, steps=15, delay=0.05):
    """Smoothly move rover marker on the map"""
    global rover_marker
    cur_lat, cur_lon = rover_marker.position
    d_lat = (lat - cur_lat) / steps
    d_lon = (lon - cur_lon) / steps
    for _ in range(steps):
        cur_lat += d_lat
        cur_lon += d_lon
        rover_marker.set_position(cur_lat, cur_lon)
        time.sleep(delay)

def read_telemetry():
    """Read telemetry from NRF24 serial"""
    while True:
        try:
            line = ser.readline().decode().strip()
            if line:
                # Example format: speed:25,batt:80,lat:33.2145,lon:-97.1330
                parts = dict(item.split(":") for item in line.split(","))
                speed = float(parts.get("speed", "0"))
                battery = float(parts.get("batt", "0"))
                lat = float(parts.get("lat", "0"))
                lon = float(parts.get("lon", "0"))

                # Update GUI
                update_speed_gauge(speed)
                update_battery(battery)
                gps_label.configure(text=f"GPS: ({lat:.5f}, {lon:.5f})")

                # Update map smoothly
                threading.Thread(target=smooth_update, args=(lat, lon), daemon=True).start()
        except Exception:
            pass

def video_loop():
    """Capture and display video"""
    cap = cv2.VideoCapture(0)  # Change if using IP camera
    while True:
        ret, frame = cap.read()
        if not ret:
            continue
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame).resize((900, 600))
        imgtk = ImageTk.PhotoImage(image=img)
        video_canvas.imgtk = imgtk
        video_canvas.configure(image=imgtk)

def joystick_loop():
    """Poll joystick and show values"""
    while True:
        pygame.event.pump()
        if joystick:
            x = joystick.get_axis(0)
            y = joystick.get_axis(1)
            # (Here you could send commands to the rover)
            print(f"Joystick -> X:{x:.2f} Y:{y:.2f}")
        time.sleep(0.5)

# ========= THREADS =========
threading.Thread(target=read_telemetry, daemon=True).start()
threading.Thread(target=video_loop, daemon=True).start()
threading.Thread(target=joystick_loop, daemon=True).start()

# ========= RUN APP =========
app.mainloop()
