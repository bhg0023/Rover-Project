import tkinter as tk
from tkinter import ttk
import threading
import time
import random
import cv2
from PIL import Image, ImageTk
import pygame


# Dummy comms (replace this DummyComms with the with the radio_rover / radio_base comms.)

class DummyComms:
    def __init__(self, callback):
        self.callback = callback
        threading.Thread(target=self.fake_receive, daemon=True).start()

    def send(self, msg):
        print("SENT:", msg)

    def fake_receive(self):
        while True:
            # Simulate telemetry messages
            lat = 30 + random.random()
            lon = -97 + random.random()
            speed = random.randint(0, 15)  # km/h
            battery = random.randint(20, 100)  # %
            msg = f"TLM,{lat:.6f},{lon:.6f},{speed},{battery}"
            self.callback(msg)
            time.sleep(5)


# GUI Application

class BaseStationGUI:
    def __init__(self, root):
        self.root = root
        root.title("Rover Base Station")
        root.geometry("950x650")

        # Layout: Left (controls & telemetry) | Right (video)
        self.left_frame = tk.Frame(root)
        self.left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        self.right_frame = tk.Frame(root, bg="black")
        self.right_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH)

        #  GPS Input 
        tk.Label(self.left_frame, text="Latitude (Cmd):").pack(pady=3)
        self.lat_entry = tk.Entry(self.left_frame)
        self.lat_entry.pack(pady=3)

        tk.Label(self.left_frame, text="Longitude (Cmd):").pack(pady=3)
        self.lon_entry = tk.Entry(self.left_frame)
        self.lon_entry.pack(pady=3)

        send_btn = tk.Button(self.left_frame, text="Send GPS", command=self.send_gps)
        send_btn.pack(pady=5)

        #  Live Telemetry 
        tk.Label(self.left_frame, text="Live Telemetry", font=("Arial", 12, "bold")).pack(pady=5)
        self.lat_label = tk.Label(self.left_frame, text="Latitude: ---")
        self.lat_label.pack(pady=2)
        self.lon_label = tk.Label(self.left_frame, text="Longitude: ---")
        self.lon_label.pack(pady=2)
        self.speed_label = tk.Label(self.left_frame, text="Speed: --- km/h")
        self.speed_label.pack(pady=2)
        self.batt_label = tk.Label(self.left_frame, text="Battery: --- %")
        self.batt_label.pack(pady=2)

        # Telemetry Log 
        tk.Label(self.left_frame, text="Telemetry Log:").pack(pady=3)
        self.log = tk.Text(self.left_frame, height=12, width=40)
        self.log.pack(pady=3)

        # Joystick Display 
        tk.Label(self.left_frame, text="Joystick:").pack(pady=3)
        self.joystick_label = tk.Label(self.left_frame, text="Not connected")
        self.joystick_label.pack(pady=3)

        # Video Display 
        self.video_label = tk.Label(self.right_frame, bg="black")
        self.video_label.pack(expand=True, fill=tk.BOTH)

        # Comms setup
        self.comms = DummyComms(self.receive_msg)

        # Start joystick + video in threads
        threading.Thread(target=self.joystick_loop, daemon=True).start()
        threading.Thread(target=self.video_loop, daemon=True).start()

  
    # GPS Handling

    def send_gps(self):
        lat = self.lat_entry.get().strip()
        lon = self.lon_entry.get().strip()
        if lat and lon:
            msg = f"GPS_CMD,{lat},{lon}"
            self.comms.send(msg)
            self.log.insert(tk.END, f"Sent: {msg}\n")
            self.log.see(tk.END)


    # Telemetry Handling

    def receive_msg(self, msg):
        self.root.after(0, self._process_msg, msg)

    def _process_msg(self, msg):
        self.log.insert(tk.END, f"Recv: {msg}\n")
        self.log.see(tk.END)

        # Parse telemetry: TLM,lat,lon,speed,battery
        if msg.startswith("TLM"):
            try:
                _, lat, lon, speed, battery = msg.split(",")
                self.lat_label.config(text=f"Latitude: {lat}")
                self.lon_label.config(text=f"Longitude: {lon}")
                self.speed_label.config(text=f"Speed: {speed} km/h")
                self.batt_label.config(text=f"Battery: {battery} %")
            except ValueError:
                pass  # ignore bad format

 
    # Joystick Handling

    def joystick_loop(self):
        pygame.init()
        pygame.joystick.init()

        if pygame.joystick.get_count() == 0:
            self.root.after(0, self._update_joystick, "No joystick found")
            return

        js = pygame.joystick.Joystick(0)
        js.init()
        self.root.after(0, self._update_joystick, f"Connected: {js.get_name()}")

        while True:
            pygame.event.pump()
            x_axis = js.get_axis(0)  # left/right
            y_axis = js.get_axis(1)  # forward/back
            msg = f"JOY,{x_axis:.2f},{y_axis:.2f}"
            self.comms.send(msg)
            self.root.after(0, self._update_joystick, msg)
            time.sleep(0.1)

    def _update_joystick(self, text):
        self.joystick_label.config(text=text)


    # Video Handling
  
    def video_loop(self):
        cap = cv2.VideoCapture(0)  # change to IP stream later
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                continue
            frame = cv2.resize(frame, (640, 480))
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(cv2image)
            imgtk = ImageTk.PhotoImage(image=img)
            self.video_label.imgtk = imgtk
            self.video_label.config(image=imgtk)

# Run App

if __name__ == "__main__":
    root = tk.Tk()
    app = BaseStationGUI(root)
    root.mainloop()
